@page "/stockdetails/{id:int}"
@using UniWeb.Data.Models
@using UniWeb.Services
@using UniWebServer.Data.Models
@using UniWebServer.Services
@inject StockServices stockServices

<h1>@stock?.Name</h1>

@if (stock?.AnalysisImageData != null)
{
    <div class="analysis-image-container">
        <img src="data:@stock.AnalysisImageType;base64,@Convert.ToBase64String(stock.AnalysisImageData)"
             alt="Analysbild" class="analysis-image"
             @onclick="OpenModal" />
    </div>
}
else
{
    <p>Ingen analysbild tillgänglig.</p>
}

<p class="stock-description">@stock?.Description</p>
<br />

<h3 class="history-title">Historik</h3>
@if (stockHistory == null || !stockHistory.Any())
{
    <p class="no-history">Ingen historik tillgänglig.</p>
}
else
{
    <ul class="history-list">
        @foreach (var history in stockHistory)
        {
            <li class="history-item" @onclick="() => LoadAnalysis(history)">
                @if (history.AnalysisImageData != null)
                {
                    <img src="data:image/png;base64,@Convert.ToBase64String(history.AnalysisImageData)"
                         alt="Analysis" class="history-thumbnail" />
                }
                <div class="history-info">
                    <p class="history-date">@history.UploadDate.ToShortDateString()</p>
                </div>
            </li>
        }
    </ul>
}

@if (currentHistory != null)
{
    <button class="btn" @onclick="LoadLatestAnalysis">Till senaste analys</button>
}


<!-- Modal -->
<Modal ImageSource="@ModalImageSource" IsBase64Image="@IsModalImageBase64" @ref="ImageModal" />

@code {
    [Parameter] public int id { get; set; }

    private Stock stock = new Stock();
    private List<StockHistory> stockHistory = new();
    private StockHistory? currentHistory = null;
    private Modal ImageModal;
    private string? ModalImageSource;
    private bool IsModalImageBase64;

    protected override async Task OnInitializedAsync()
    {
        // Hämta historik och aktieinformation
        stock = stockServices.GetStockById(id);

        if (stock != null)
        {
            // Försök hämta historik
            stockHistory = stockServices.GetStockHistoryByStockId(id);

            // Ladda senaste analys om historik finns
            if (stockHistory.Any())
            {
                LoadLatestAnalysis();
            }
        }
    }

    private void LoadLatestAnalysis()
    {
        var latestHistory = stockServices.GetLatestStockHistory(id);

        if (latestHistory != null)
        {
            currentHistory = null;
            stock.AnalysisImageData = latestHistory.AnalysisImageData;
            stock.AnalysisImageType = latestHistory.AnalysisImageType;
            stock.Description = latestHistory.Description;

            ModalImageSource = $"data:{latestHistory.AnalysisImageType};base64,{Convert.ToBase64String(latestHistory.AnalysisImageData)}";
            IsModalImageBase64 = true;

            StateHasChanged(); // Rendera om
        }
    }

    private void LoadAnalysis(StockHistory history)
    {
        if (history.AnalysisImageData != null)
        {
            currentHistory = history;
            stock.AnalysisImageData = history.AnalysisImageData;
            stock.AnalysisImageType = history.AnalysisImageType;
            stock.Description = history.Description;

            ModalImageSource = $"data:{history.AnalysisImageType};base64,{Convert.ToBase64String(history.AnalysisImageData)}";
            IsModalImageBase64 = true;

            StateHasChanged(); // Rendera om
        }
    }

    private void OpenModal()
    {
        ImageModal?.Show();
    }
}
