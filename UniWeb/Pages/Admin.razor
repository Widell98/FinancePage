@page "/Admin"
@using System.Net.Http
@using System.Text.Json
@using UniWeb.Data.Models;
@using UniWeb.Services;
@using Microsoft.JSInterop;
@inject StockServices stockServices
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<div class="container mt-5">
    <div class="container mt-5">
        <div class="row mt-5">
            <div class="col-md-12">
                <div class="stock-list">
                    <h3 class="investing-title">Portfolio</h3>
                    @if (allStocks.Any())
                    {
                        <ul class="list-group">
                            @foreach (var stock in allStocks)
                            {
                                <li class="list-group-item">
                                    <strong>@stock.Name</strong>

                                    <div>
                                        <button class="btn btn-primary btn-sm" @onclick="() => OpenEditModal(stock)">Edit</button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(stock.Id)">Delete</button>

                                    </div>
                                </li>
                                <hr />
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No stocks in the database.</p>
                    }
                </div>
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-md-6">
            <h3>Portfolio Builder</h3>
            <EditForm Model="@stock" OnValidSubmit="HandleStockSubmit">
                <div class="form-group">
                    <label for="NameInput">Stock Name</label>
                    <InputText class="form-control" id="NameInput" @bind-Value="@stock.Name"></InputText>
                    <ValidationMessage For="@(() => stock.Name)" />
                </div>
                <div class="form-group">
                    <label for="Description">Description</label>
                    <InputText class="form-control" id="Description" @bind-Value="stock.Description"></InputText>
                </div>
                <div class="form-group">
                    <label for="SectorInput">Stock Sector</label>
                    <select class="form-control" id="SectorInput" @bind="@stock.sector">
                        @foreach (Sector sector in Enum.GetValues(typeof(Sector)))
                        {
                            <option value="@sector">@sector</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="ImageInput">Stock Image</label>
                    <InputFile class="form-control-file" id="ImageInput" OnChange="HandleFileChange" />
                </div>
                <button type="submit" class="btn btn-primary">Add Stock</button>
            </EditForm>

            @if (showFailMessage)
            {
                <div class="alert alert-danger mt-2">Stock already exists in the database.</div>
            }
            @if (showSuccessMessage)
            {
                <div class="alert alert-success mt-2">Stock added successfully!</div>
            }
            <br />
        </div>

        <div class="col-md-6">
            <div class="search-form">
                <h3>Search for Stocks</h3>
                <form @onsubmit="HandleSubmit">
                    <div class="form-group">
                        <label for="StockSymbol">Stock Symbol</label>
                        <input class="form-control" id="StockSymbol" @bind="@stockSymbol" />
                    </div>
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>
                @if (!string.IsNullOrEmpty(apiResult))
                {
                    <p class="api-result-title">Summary:</p>
                    <pre class="api-result">@longBusinessSummary</pre>
                }
            </div>
        </div>


        <div class="modal" tabindex="-1" role="dialog" style="@($"display: {(EditModalOpen ? "block" : "none")};" )">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Stock</h5>
                        <button type="button" class="close" @onclick="CloseEditModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form @onsubmit="HandleEditSubmit">
                            <div class="form-group">
                                <label for="EditStockName">Name</label>
                                <InputText id="EditStockName" @bind-Value="@editStock.Name"></InputText>
                            </div>
                            <div class="form-group">
                                <label for="EditStockDescription">Description</label>
                                <InputText id="EditStockDescription" @bind-Value="@editStock.Description"></InputText>
                            </div>


                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private string stockSymbol = "";
    private string apiResult = null;
    private string longBusinessSummary = null;
    private readonly HttpClient client = new HttpClient();
    private string modalStyle = "display: none;";
    private int editStockId;
    private Stock editStock = new Stock();
    private bool EditModalOpen = false;
    private byte[]? uploadedImageData;
    private string? uploadedImageMimeType;

    private Stock stock = new Stock();
    private bool showSuccessMessage = false;
    private bool showFailMessage = false;

    private async Task HandleStockSubmit()
    {
        bool isStockExist = stockServices.IsStockExists(stock.Name);

        if (isStockExist)
        {
            // Aktien finns redan, visa felmeddelande
            showFailMessage = true;
        }
        else
        {
            // Aktien finns inte, lägg till i databasen
            stockServices.AddStock(stock);
            showFailMessage = false;
            showSuccessMessage = true;

            stock = new Stock();
        }
    }


    private void OpenEditModal(Stock stock)
    {
        editStock = new Stock
            {
                Id = stock.Id,
                Name = stock.Name,
                Description = stock.Description
                // Lägg till fler egenskaper om det behövs för redigering
            };
        EditModalOpen = true;
    }
    private void HandleEditSubmit()
    {
        stockServices.EditStock(editStock.Id, editStock);
        // Återställ formuläret efter inlämning
        CloseEditModal();
        // Uppdatera listan med aktier
        allStocks = stockServices.GetAllStocks();
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        // Hantera filändringen här
        // e.File kommer att innehålla information om den uppladdade filen
        // Konvertera den till byte-array och lagra i din modell (stock)
        using (var stream = e.File.OpenReadStream())
        {
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                stock.ImageData = memoryStream.ToArray();
            }
        }

        // Sätt MIME-typen baserat på filändelse (kan vara mer robust i produktion)
        stock.ImageType = e.File.ContentType;
    }

    private void CloseEditModal()
    {
        EditModalOpen = false;
        editStock = new Stock();
    }

    private async Task ConfirmDelete(int stockId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this stock?");
        if (confirmed)
        {
            // Radera aktien om användaren bekräftar
            DeleteStock(stockId);
        }
    }



    private void DeleteStock(int stockId)
    {
        stockServices.DeleteStock(stockId);
        allStocks = stockServices.GetAllStocks();
    }

    private List<Stock> allStocks = new List<Stock>();

    protected override void OnInitialized()
    {
        allStocks = stockServices.GetAllStocks();
    }


    private async Task HandleSubmit()
    {
        var requestUri = $"https://yahoo-finance15.p.rapidapi.com/api/yahoo/qu/quote/{stockSymbol}/asset-profile";

        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri(requestUri),
            };
        request.Headers.Add("X-RapidAPI-Key", "c4847df697msh31a55302ed091fcp1d1c66jsnc6f6f2254b77");
        request.Headers.Add("X-RapidAPI-Host", "yahoo-finance15.p.rapidapi.com");

        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();

            // Parsa JSON-svaret
            var jsonDocument = JsonDocument.Parse(body);

            // Extrahera "longBusinessSummary"
            if (jsonDocument.RootElement.TryGetProperty("assetProfile", out var assetProfile))
            {
                if (assetProfile.TryGetProperty("longBusinessSummary", out var longBusinessSummaryElement))
                {
                    longBusinessSummary = longBusinessSummaryElement.GetString();
                }
            }

            // Spara hela API-svaret om du behöver det för andra ändamål
            apiResult = body;
        }
    }
}

<style>
    .stock-list .list-group-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        border: none;
        padding: 0;
        margin-bottom: 10px;
        background-color: transparent;
    }

        .stock-list .list-group-item:last-child {
            margin-bottom: 0;
        }

        .stock-list .list-group-item .description {
            flex: 1;
            text-align: center;
        }

        .stock-list .list-group-item button {
            margin-left: 5px;
        }

    .container {
        max-width: 800px;
        margin: auto;
    }

    .mt-5 {
        margin-top: 2rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }



    /* ... Your existing styles ... */

    /* Add custom styles for the list items */
    .stock-list .list-group-item {
        border: none;
        padding: 0;
        margin-bottom: 10px;
        background-color: transparent;
    }

        .stock-list .list-group-item:last-child {
            margin-bottom: 0;
        }

    /* Style the line between list items */
    .stock-list hr {
        border-top: px solid #ccc;
    }

    .investing-title {
        margin-bottom: 20px;
    }
</style>